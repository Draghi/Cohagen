PhysicsObject:
        Particle* particle;
  ForceGenerator* forceGenerators;
              int forceGeneratorCount;
            Vec3* collisionMesh;
            Vec3* rotation;
            Vec3* scale;

RenderObject:
  Shader*   shader;
  Vao*      model;
  Texture*  textures;
  int       textureCount;
  int       renderPass;

ObjectGovernor:
  int governorID;
  void    onCreate(GameObject* self, World* world);
  void    onCreate(GameObject* self, World* world);
  void    onUpdate(GameObject* self, World* world);
  void    onRender(GameObject* self, World* world);
  void onCollision(GameObject* self, GameObject* other, World* world);
  void   onDestroy(GameObject* self, World* world);
  
  GameObject* newInstance();
  void destroyInstance(GameObject* self);
  
GameObject:
             int instanceID;
             int governorID;
   RenderObject* renderObject;
  PhysicsObject* physicsObject;
  
World:
         void addNewInstance(int governorID);
  GameObject* getInstance(int instanceID);
         void destroyInstance(int instanceID);
  
              int     addGovernor(ObjectGovernor* governor); //Returns governor's id
  ObjectGovernor*     getGovernor(int governorID); //Returns governor
             void destroyGovernor(int governorID);
  
              int    addForce(int instanceID, ForceGenerator* force); //Returns force id
  ForceGenerator*    getForce(int instanceID); //Returns force
             void removeForce(int instanceID, int forceID);
  
              int    addGlobalForce(ForceGenerator* force); //Returns force id
  ForceGenerator*    getGlobalForce(int instanceID); //Returns force
             void removeGlobalForce(int forceID);
